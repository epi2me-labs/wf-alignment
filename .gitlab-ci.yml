# Include shared CI
include:
    - project: "epi2melabs/ci-templates"
      file: "wf-containers.yaml"

variables:
    NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
    --counts test_data/counts/ERCC_mix1.csv"
    CI_FLAVOUR: "new"
    PYTEST_CONTAINER_NAME: "wf-common"
    PYTEST_CONTAINER_CONFIG_KEY: "common_sha="



docker-run:
    tags: []

    # Define a 1D job matrix to inject a variable named MATRIX_NAME into
    #   the CI environment, we can use the value of MATRIX_NAME to determine
    #   which options to apply as part of the rules block below
    # NOTE There is a slightly cleaner way to define this matrix to include
    #   the variables, but it is broken when using long strings! See CW-756
    parallel:
        matrix:
            - MATRIX_NAME: [
                "fastq", "bam", "ubam", "compress-one-ref", "compress-all-refs", "mmi",
                "numeric_chrom_id_ref-01", "numeric_chrom_id_ref-02",
                "igv",
            ]
    rules:
        # NOTE As we're overriding the rules block for the included docker-run
        #   we must redefine this CI_COMMIT_BRANCH rule to prevent docker-run
        #   being incorrectly scheduled for "detached merge request pipelines" etc.
        - if: ($CI_COMMIT_BRANCH == null || $CI_COMMIT_BRANCH == "dev-template")
          when: never
        - if: $MATRIX_NAME == "fastq"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "bam"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/bam --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: alignReads,checkReferences
        - if: $MATRIX_NAME == "ubam"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/ubam --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        # run on FASTQ again after compressing one / all references
        - if: $MATRIX_NAME == "compress-one-ref"
          variables:
              NF_BEFORE_SCRIPT: |
                  mkdir -p $CI_PROJECT_NAME &&
                  cp -r test_data/references $CI_PROJECT_NAME/refs &&
                  gzip $CI_PROJECT_NAME/refs/ERCC.fasta
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references $CI_PROJECT_NAME/refs \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "compress-all-refs"
          variables:
              NF_BEFORE_SCRIPT: |
                  mkdir -p $CI_PROJECT_NAME &&
                  cp -r test_data/references $CI_PROJECT_NAME/refs &&
                  gzip $CI_PROJECT_NAME/refs/*
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references $CI_PROJECT_NAME/refs \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "mmi"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
                  --reference_mmi_file test_data/references/combined_references.mmi -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: makeMMIndex,renameBamFiles
        - if: $MATRIX_NAME == "igv"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB \
                  --igv"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "numeric_chrom_id_ref-01"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/other_references/case01 \
                  -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "numeric_chrom_id_ref-02"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/other_references/case02 \
                  -executor.\\$$local.memory 12GB"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles
        - if: $MATRIX_NAME == "igv"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv -executor.\\$$local.memory 12GB \
                  --igv"
              NF_IGNORE_PROCESSES: checkReferences,renameBamFiles

aws-run:
    parallel:
        matrix:
            - MATRIX_NAME: [ "counts", "no-counts" ]
    rules:
        # NOTE As we're overriding the rules block for the included docker-run
        #   we must redefine this CI_COMMIT_BRANCH rule to prevent docker-run
        #   being incorrectly scheduled for "detached merge request pipelines" etc.
        - if: ($CI_COMMIT_BRANCH == null || $CI_COMMIT_BRANCH == "dev-template")
          when: never
        - if: $MATRIX_NAME == "counts"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references \
                  --counts test_data/counts/ERCC_mix1.csv"
              NF_IGNORE_PROCESSES: sortInputBam
        - if: $MATRIX_NAME == "no-counts"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq --references test_data/references"
              NF_IGNORE_PROCESSES: sortInputBam
